// System Imports //
using System;
using System.Collections.Generic;
using System.Linq;
// End of System Imports //

// Beginning of Program //
namespace Election // The namespace incorporating the entire program
{
    class Party // The class used for instances of a political parts, storing all necessary data and methods
    {
        // Variable definitions //
        protected int startVotes;
        protected List<string> candidates = new List<string>();
        protected int seats;
        public int newVotes;
        protected string currentCandidate;
        public Party(int votes, List<string> candidateList) // Class initialisation using given data for each party
        {
            this.startVotes = votes; // The actual number of votes the party gets
            this.candidates = candidateList; // The imported list of candidates who are running for a seat in order
            this.seats = 0; // How many seats the party has obtained; starting at zero
            this.newVotes = startVotes; // The adjusted votes which will be changed as the party wins seats using wonSeat()
        }

        public string wonSeat() // Adjust the effective votecount depending on how many seats the party has obtained
        {
            this.seats += 1; // Add one seat to the count (they've won a seat if the program has got this far)
            this.newVotes = this.startVotes / (this.seats + 1); // Divide the actual votes by the number of seats already won as per the D'Hondt algorithm

            currentCandidate = candidates[0]; // Take the candidate at the front of the queue
            this.candidates.RemoveAt(0); // Remove that candidate from the list, essentially operating as a stack/queue

            return currentCandidate; // Output the candidate being put forward by the party
        }
    }

    class Program // Main runcode
    {
        static void Main(string[] args)
        {
            // Create instances of all the political parties incorporating the given voting data

            List<string> BrexitPartyCandidates = new List<string>() { "BP1", "BP2", "BP3", "BP4", "BP5" }; // Initialise the candidate list
            Party BrexitParty = new Party(452321, BrexitPartyCandidates); // Create the party using the class

            List<string> LiberalDemocratsCandidates = new List<string>() { "LD1", "LD2", "LD3", "LD4", "LD5" };
            Party LiberalDemocrats = new Party(203989, LiberalDemocratsCandidates);

            List<string> LabourCandidates = new List<string>() { "LAB1", "LAB2", "LAB3", "LAB4", "LAB5" };
            Party Labour = new Party(164682, LabourCandidates);

            List<string> ConservativeCandidates = new List<string>() { "CON1", "CON2", "CON3", "CON4", "CON5" };
            Party Conservative = new Party(126138, ConservativeCandidates);

            List<string> GreenCandidates = new List<string>() { "GR1", "GR2", "GR3", "GR4", "GR5" };
            Party Green = new Party(124630, GreenCandidates);

            List<string> UKIPCandidates = new List<string>() { "UKP1", "UKP2", "UKP3", "UKP4", "UKP5" };
            Party UKIP = new Party(58198, UKIPCandidates);

            List<string> ChangeUKCandidates = new List<string>() { "CUK1", "CUK2", "CUK3", "CUK4", "CUK5" };
            Party ChangeUK = new Party(41117, ChangeUKCandidates);

            List<string> IndependentNetworkCandidates = new List<string>() { "INET1", "INET2", "INET3", "INET4", "INET5" };
            Party IndependentNetwork = new Party(7641, IndependentNetworkCandidates);

            List<string> IndependentCandidates = new List<string>() { "IND1" };
            Party Independent = new Party(4511, IndependentCandidates);

            // Create a list of parties so they can be compared in one go later on
            List<Party> PartyList = new List<Party>() { BrexitParty, LiberalDemocrats, Labour, Conservative, Green, UKIP, ChangeUK, IndependentNetwork, Independent };

            // Actual rounds of candidate selection
            int count = 0; // Used to repeat the loop 5 times
            do
            {
                PartyList = PartyList.OrderByDescending(Party => Party.newVotes).ToList(); // Sort the parties by how many (adjusted) votes they got
                Console.WriteLine(PartyList[0].wonSeat()); // Take the party with the most (adjusted) votes, activate the method to handle submitting a winner and output which candidate has been put forward
                Console.WriteLine(""); // Add an extra space for UX

                count += 1; // Continue the loop...
            } while (count < 5); // Loop...
        }

    }
}
